<?php
declare(strict_types = 1);

namespace pozitronik\widgets;

use Yii;
use yii\base\Widget;
use yii\caching\Dependency;

/**
 * Class CachedWidget
 * Enable rendering caching for widgets.
 * @property null|int $duration default duration in seconds before the cache will expire. If not set,
 * [[defaultDuration]] value will be used.
 * @property null|Dependency $dependency dependency of the cached item. If the dependency changes,
 * the corresponding value in the cache will be invalidated when it is fetched via [[get()]].
 * @property-read null|bool $isResultFromCache Is rendering result retrieved from cache (null if not rendered yet).
 * @property-write callable|string $cacheNamePrefix Key prefix, that can be set in descendent class.
 * @property-write string $cacheUniqueId Unique widget identifier, that can be set in descendent class. Autogenerated if not set.
 * @property bool $disable If true, act like regular widget (disable caching).
 * @example Usage example:
 * ```php
 * class MyWidget extends CachedWidget {
 * // it is all, mostly
 * }
 * ```
 */
class CachedWidget extends Widget {
	protected $_duration;
	protected $_dependency;

	private $_isResultFromCache;
	private $_cacheNamePrefix = '';
	private $_cacheUniqueId;
	/** @var CachedResources|null $resources */
	private $resources;
	private $_disable = false;

	public function init():void {
		parent::init();
		$this->resources = new CachedResources();

		if (is_callable($this->_cacheNamePrefix)) {
			$this->_cacheNamePrefix = call_user_func($this->_cacheNamePrefix, static::class);
		}

	}

	/**
	 * @param null $mixed
	 * @return false|string
	 */
	protected static function var_dump_ret($mixed = null):string {
		ob_start();
		var_dump($mixed);
		return ob_get_clean();
	}

	/**
	 * {@inheritDoc}
	 */
	public function render($view, $params = []):string {

		if ($this->_disable) return $this->getView()->render($view, $params, $this);

		$cacheName = null === $this->_cacheUniqueId?$this->_cacheNamePrefix.self::class.$view.sha1(self::var_dump_ret($params)):$this->_cacheNamePrefix.self::class.$view.$this->_cacheUniqueId;
		if (true === $this->_isResultFromCache = Yii::$app->cache->exists($cacheName)) {//rendering result retrieved from cache => register linked resources
			$this->resources->attributes = Yii::$app->cache->get($cacheName."resources");

			foreach ($this->resources->metaTags as $key => $metaTag) {
				if (is_numeric($key)) {
					$this->getView()->metaTags[] = $metaTag;//tags registered as string, not as convertible array
				} else {
					$this->getView()->metaTags[$key] = $metaTag;
				}
			}

			foreach ($this->resources->linkTags as $key => $linkTag) {
				if (is_numeric($key)) {
					$this->getView()->linkTags[] = $linkTag;//tags registered as string, not as convertible array
				} else {
					$this->getView()->linkTags[$key] = $linkTag;
				}
			}

			foreach ($this->resources->css as $key => $css) {
				if (is_numeric($key)) {
					$this->getView()->css[] = $css;//inline css registered as string, not as convertible array
				} else {
					$this->getView()->css[$key] = $css;
				}

			}
			foreach ($this->resources->cssFiles as $key => $cssFile) {
				/**
				 * $cssFile is already prepared html-string
				 * If resource has registered with asset dependency, then it placed in assetBundles section, see \yii\web\View::registerCssFile
				 */
				$this->getView()->registerCssFile($cssFile, [], $key);
			}

			foreach ($this->resources->js as $position => $js) {
				foreach ($js as $hash => $jsString) {
					$this->getView()->registerJs($jsString, $position, $hash);
				}
			}

			foreach ($this->resources->jsFiles as $position => $jsFile) {
				$this->getView()->registerJsFile($jsFile, ['position' => $position]);
			}

			foreach ($this->resources->assetBundles as $key => $bundle) {
				$this->getView()->assetBundles[] = $bundle;
			}
		}

		return Yii::$app->cache->getOrSet($cacheName, function() use ($view, $params, $cacheName) {
			$this->_isResultFromCache = false;
			$currentlyRegisteredMetaTags = $this->getView()->metaTags;
			$currentlyRegisteredLinkTags = $this->getView()->linkTags;
			$currentlyRegisteredCss = $this->getView()->css;
			$currentlyRegisteredCssFiles = $this->getView()->cssFiles;
			$currentlyRegisteredJs = $this->getView()->js;
			$currentlyRegisteredJsFiles = $this->getView()->jsFiles;
			$currentlyRegisteredAssets = Yii::$app->assetManager->bundles;

			$renderResult = $this->getView()->render($view, $params, $this);

			Yii::$app->cache->set($cacheName."resources", [
				'metaTags' => array_diff_key($this->getView()->metaTags, $currentlyRegisteredMetaTags),
				'linkTags' => array_diff_key($this->getView()->linkTags, $currentlyRegisteredLinkTags),
				'css' => array_diff_key($this->getView()->css, $currentlyRegisteredCss),
				'cssFiles' => array_diff_key($this->getView()->cssFiles, $currentlyRegisteredCssFiles),
				'js' => array_diff_key($this->getView()->js, $currentlyRegisteredJs),
				'jsFiles' => array_diff_key($this->getView()->jsFiles, $currentlyRegisteredJsFiles),
				'assetBundles' => array_diff_key(Yii::$app->assetManager->bundles, $currentlyRegisteredAssets)
			], $this->_duration, $this->_dependency);//remember all included resources
			return $renderResult;
		}, $this->_duration, $this->_dependency);
	}

	/**
	 * @param null|int $duration
	 */
	public function setDuration(?int $duration):void {
		$this->_duration = $duration;
	}

	/**
	 * @param null|Dependency $dependency
	 */
	public function setDependency(?Dependency $dependency):void {
		$this->_dependency = $dependency;
	}

	/**
	 * @return null|bool
	 */
	public function getIsResultFromCache():?bool {
		return $this->_isResultFromCache;
	}

	/**
	 * @param string|callable $cacheNamePrefix
	 */
	public function setCacheNamePrefix($cacheNamePrefix):void {
		$this->_cacheNamePrefix = $cacheNamePrefix;
	}

	/**
	 * @return bool
	 */
	public function getDisable():bool {
		return $this->_disable;
	}

	/**
	 * @param bool $disable
	 */
	public function setDisable(bool $disable):void {
		$this->_disable = $disable;
	}

	/**
	 * @param string $cacheUniqueId
	 */
	public function setCacheUniqueId(string $cacheUniqueId):void {
		$this->_cacheUniqueId = $cacheUniqueId;
	}

}